<html lang="en"><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quantum Nexus - Advanced Shader Technology</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
    <script src="https://unpkg.com/cobe@0.6.3/dist/cobe.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@300;400;500;600&display=swap');
        * { font-family: 'Inter', sans-serif; }
        .mono { font-family: 'JetBrains Mono', monospace; }
        
        .fade-in { opacity: 0; transform: translateY(30px); animation: fadeInUp 1s ease-out forwards; }
        .slide-left { opacity: 0; transform: translateX(-50px); animation: slideInLeft 1s ease-out forwards; }
        .slide-right { opacity: 0; transform: translateX(50px); animation: slideInRight 1s ease-out forwards; }
        .scale-in { opacity: 0; transform: scale(0.8); animation: scaleIn 1s ease-out forwards; }
        .rotate-in { opacity: 0; transform: rotate(-10deg) scale(0.9); animation: rotateIn 1s ease-out forwards; }
        
        .delay-100 { animation-delay: 0.1s; }
        .delay-200 { animation-delay: 0.2s; }
        .delay-300 { animation-delay: 0.3s; }
        .delay-400 { animation-delay: 0.4s; }
        .delay-500 { animation-delay: 0.5s; }
        .delay-600 { animation-delay: 0.6s; }
        .delay-700 { animation-delay: 0.7s; }
        .delay-800 { animation-delay: 0.8s; }
        .delay-900 { animation-delay: 0.9s; }
        .delay-1000 { animation-delay: 1s; }
        
        @keyframes fadeInUp {
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes slideInLeft {
            to { opacity: 1; transform: translateX(0); }
        }
        @keyframes slideInRight {
            to { opacity: 1; transform: translateX(0); }
        }
        @keyframes scaleIn {
            to { opacity: 1; transform: scale(1); }
        }
        @keyframes rotateIn {
            to { opacity: 1; transform: rotate(0deg) scale(1); }
        }
        
        .glow-blue { box-shadow: 0 0 20px rgba(59, 130, 246, 0.3); }
        .glow-purple { box-shadow: 0 0 20px rgba(147, 51, 234, 0.3); }
        .glow-cyan { box-shadow: 0 0 20px rgba(6, 182, 212, 0.3); }
        
        .glass { backdrop-filter: blur(20px); background: rgba(15, 23, 42, 0.4); }
        .glass-light { backdrop-filter: blur(10px); background: rgba(255, 255, 255, 0.05); }
        
        .border-gradient {
            background: linear-gradient(45deg, #3b82f6, #8b5cf6, #06b6d4);
            padding: 2px;
            border-radius: 16px;
        }
        
        .code-window {
            background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
            border: 1px solid #334155;
        }
        
        .floating { animation: float 6s ease-in-out infinite; }
        .floating-delayed { animation: float 6s ease-in-out infinite 2s; }
        
        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
        }
        
        .typing::after {
            content: '|';
            animation: blink 1s infinite;
        }
        
        @keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }
        
        .orbit {
            animation: orbit 20s linear infinite;
        }
        
        @keyframes orbit {
            from { transform: rotate(0deg) translateX(100px) rotate(0deg); }
            to { transform: rotate(360deg) translateX(100px) rotate(-360deg); }
        }
    </style>
</head>
<body class="bg-black text-white overflow-x-hidden">
    <!-- Particles Background -->
    <div id="particles-js" class="fixed inset-0 -z-20"><canvas class="particles-js-canvas-el" width="2422" height="2096" style="width: 100%; height: 100%;"></canvas></div>
    
    <!-- Three.js Canvas Background -->
    <canvas id="shader-canvas" class="fixed inset-0 w-full h-full -z-10"></canvas>
    
    <!-- Navigation -->
    <nav class="relative z-50 flex items-center justify-between p-6 glass border-b border-gray-800/30 slide-left">
        <div class="flex items-center space-x-3">
            <div class="w-8 h-8 bg-gradient-to-br from-blue-400 to-purple-600 rounded-lg flex items-center justify-center">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-lucide="hexagon" class="lucide lucide-hexagon w-5 h-5 text-white"><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path></svg>
            </div>
            <div class="text-xl font-semibold tracking-tight">Nexus</div>
            <div class="px-2 py-1 text-xs mono bg-green-500/20 text-green-300 rounded-md border border-green-500/30">
                v2.4.1
            </div>
        </div>
        
        <div class="hidden lg:flex items-center space-x-8">
            <div class="flex items-center space-x-6">
                <a href="#" class="text-gray-300 hover:text-white transition-colors duration-200 flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-lucide="box" class="lucide lucide-box w-4 h-4"><path d="M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z"></path><path d="m3.3 7 8.7 5 8.7-5"></path><path d="M12 22V12"></path></svg>
                    Products
                </a>
                <a href="#" class="text-gray-300 hover:text-white transition-colors duration-200 flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-lucide="layers-3" class="lucide lucide-layers-3 w-4 h-4"><path d="M12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83z"></path><path d="M2 12a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 12"></path><path d="M2 17a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 17"></path></svg>
                    Solutions
                </a>
                <a href="#" class="text-gray-300 hover:text-white transition-colors duration-200 flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-lucide="code-2" class="lucide lucide-code-2 w-4 h-4"><path d="m18 16 4-4-4-4"></path><path d="m6 8-4 4 4 4"></path><path d="m14.5 4-5 16"></path></svg>
                    Developers
                </a>
                <a href="#" class="text-gray-300 hover:text-white transition-colors duration-200 flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-lucide="building" class="lucide lucide-building w-4 h-4"><rect width="16" height="20" x="4" y="2" rx="2" ry="2"></rect><path d="M9 22v-4h6v4"></path><path d="M8 6h.01"></path><path d="M16 6h.01"></path><path d="M12 6h.01"></path><path d="M12 10h.01"></path><path d="M12 14h.01"></path><path d="M16 10h.01"></path><path d="M16 14h.01"></path><path d="M8 10h.01"></path><path d="M8 14h.01"></path></svg>
                    Company
                </a>
            </div>
            <div class="flex items-center space-x-3">
                <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                <span class="text-sm text-gray-400 mono">System Online</span>
            </div>
        </div>
        
        <div class="flex items-center space-x-3">
            <button class="p-2 hover:bg-gray-800 rounded-lg transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-lucide="github" class="lucide lucide-github w-5 h-5"><path d="M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"></path><path d="M9 18c-4.51 2-5-2-7-2"></path></svg>
            </button>
            <button class="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-2 rounded-lg text-sm font-medium hover:scale-105 transition-transform duration-200 glow-blue">
                Launch Console
            </button>
        </div>
    </nav>

    <!-- Hero Section -->
    <section class="relative z-10 min-h-screen flex items-center justify-center px-6 py-20">
        <div class="max-w-7xl mx-auto grid lg:grid-cols-2 gap-16 items-center">
            <!-- Left Content -->
            <div class="space-y-8">
                <div class="space-y-6">
                    <div class="flex items-center space-x-3 fade-in delay-100">
                        <div class="px-3 py-1 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-full text-sm font-medium border border-blue-500/30">
                            <span class="mono">⚡ Now Available</span>
                        </div>
                        <div class="flex space-x-2">
                            <div class="w-2 h-2 bg-blue-400 rounded-full animate-ping"></div>
                            <div class="w-2 h-2 bg-purple-400 rounded-full animate-ping" style="animation-delay: 0.5s;"></div>
                            <div class="w-2 h-2 bg-cyan-400 rounded-full animate-ping" style="animation-delay: 1s;"></div>
                        </div>
                    </div>
                    
                    <h1 class="lg:text-7xl leading-tight fade-in delay-200 text-5xl font-medium tracking-tighter">
                        Build with
                        <span class="block bg-clip-text font-medium text-transparent bg-gradient-to-r from-blue-400 via-purple-500 to-cyan-400">Quantum Shaders</span>
                    </h1>
                    
                    <p class="text-xl text-gray-300 leading-relaxed max-w-xl fade-in delay-300">
                        Experience the next dimension of visual computing with our revolutionary real-time ray-tracing shader technology. 
                        <span class="text-blue-400 font-medium">GPU-accelerated</span> and 
                        <span class="text-purple-400 font-medium">infinitely scalable</span>.
                    </p>
                </div>
                
                <div class="flex flex-col sm:flex-row gap-4 fade-in delay-400">
                    <button class="group bg-white text-black px-8 py-4 rounded-xl font-medium hover:bg-gray-100 transition-all duration-200 hover:scale-105 flex items-center justify-center gap-3 glow-blue">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-lucide="play" class="lucide lucide-play w-5 h-5 group-hover:scale-110 transition-transform"><polygon points="6 3 20 12 6 21 6 3"></polygon></svg>
                        <span>Watch Demo</span>
                        <div class="w-1 h-1 bg-red-500 rounded-full animate-pulse"></div>
                    </button>
                    <button class="group glass-light border border-gray-600 text-white px-8 py-4 rounded-xl font-medium hover:border-gray-400 transition-all duration-200 hover:scale-105 flex items-center justify-center gap-3">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-lucide="terminal" class="lucide lucide-terminal w-5 h-5 group-hover:rotate-12 transition-transform"><path d="M12 19h8"></path><path d="m4 17 6-6-6-6"></path></svg>
                        <span class="mono">npx quantum-nexus</span>
                    </button>
                </div>
                
                <div class="flex items-center space-x-8 pt-4 fade-in delay-500">
                    <div class="text-center">
                        <div class="text-2xl font-semibold text-blue-400 mono">60fps</div>
                        <div class="text-sm text-gray-400">Real-time</div>
                    </div>
                    <div class="w-px h-8 bg-gray-600"></div>
                    <div class="text-center">
                        <div class="text-2xl font-semibold text-purple-400 mono">∞</div>
                        <div class="text-sm text-gray-400">Ray Sources</div>
                    </div>
                    <div class="w-px h-8 bg-gray-600"></div>
                    <div class="text-center">
                        <div class="text-2xl font-semibold text-cyan-400 mono">GPU</div>
                        <div class="text-sm text-gray-400">Accelerated</div>
                    </div>
                </div>
            </div>
            
            <!-- Right Content - Interactive Demo -->
            <div class="relative scale-in delay-600">
                <div class="relative">
                    <!-- Globe Container -->
                    <div class="w-96 h-96 mx-auto relative floating">
                        <canvas id="cobe" class="w-full h-full"></canvas>
                        <div class="absolute inset-0 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-full blur-3xl"></div>
                    </div>
                    
                    <!-- Floating Elements -->
                    <div class="absolute -top-8 -right-4 glass p-4 rounded-xl border border-gray-700 floating-delayed">
                        <div class="flex items-center gap-3">
                            <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
                            <span class="mono text-sm">Rendering: 4K</span>
                        </div>
                    </div>
                    
                    <div class="absolute -bottom-4 -left-8 glass p-4 rounded-xl border border-gray-700 floating">
                        <div class="flex items-center gap-3">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-lucide="zap" class="lucide lucide-zap w-4 h-4 text-yellow-400"><path d="M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z"></path></svg>
                            <span class="mono text-sm">GPU: 98% Util</span>
                        </div>
                    </div>
                    
                    <div class="absolute top-1/2 -right-16 glass p-3 rounded-xl border border-gray-700 floating-delayed">
                        <div class="mono text-xs text-cyan-400">vec3(0.4, 0.8, 1.0)</div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Code Preview Section -->
    <section class="relative z-10 py-24 px-6">
        <div class="max-w-6xl mx-auto">
            <div class="text-center mb-16 fade-in delay-700">
                <h2 class="text-4xl font-medium tracking-tight mb-4">
                    Write shaders like <span class="text-blue-400">poetry</span>
                </h2>
                <p class="text-gray-400 text-lg">
                    Intuitive syntax meets unlimited creative potential
                </p>
            </div>
            
            <div class="grid lg:grid-cols-2 gap-8">
                <!-- Code Window -->
                <div class="code-window rounded-2xl overflow-hidden slide-left delay-800">
                    <div class="flex items-center justify-between p-4 border-b border-gray-700">
                        <div class="flex items-center space-x-3">
                            <div class="flex space-x-2">
                                <div class="w-3 h-3 bg-red-500 rounded-full"></div>
                                <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
                                <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                            </div>
                            <span class="mono text-sm text-gray-400">quantum-shader.glsl</span>
                        </div>
                        <div class="flex items-center space-x-2">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-lucide="copy" class="lucide lucide-copy w-4 h-4 text-gray-400 hover:text-white cursor-pointer"><rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect><path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path></svg>
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-lucide="external-link" class="lucide lucide-external-link w-4 h-4 text-gray-400 hover:text-white cursor-pointer"><path d="M15 3h6v6"></path><path d="M10 14 21 3"></path><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path></svg>
                        </div>
                    </div>
                    <div class="p-6 mono text-sm leading-relaxed">
<pre><span class="text-purple-400">uniform</span> <span class="text-blue-400">vec2</span> <span class="text-white">resolution</span>;
<span class="text-purple-400">uniform</span> <span class="text-blue-400">float</span> <span class="text-white">time</span>;

<span class="text-blue-400">float</span> <span class="text-green-400">quantumRay</span>(<span class="text-blue-400">vec2</span> <span class="text-white">pos</span>, <span class="text-blue-400">float</span> <span class="text-white">phase</span>) {
    <span class="text-blue-400">float</span> <span class="text-white">wave</span> = <span class="text-green-400">sin</span>(<span class="text-white">phase</span> + <span class="text-white">time</span> * <span class="text-yellow-400">2.0</span>);
    <span class="text-purple-400">return</span> <span class="text-green-400">pow</span>(<span class="text-white">wave</span>, <span class="text-yellow-400">3.0</span>) * <span class="text-green-400">length</span>(<span class="text-white">pos</span>);
}

<span class="text-purple-400">void</span> <span class="text-green-400">main</span>() {
    <span class="text-blue-400">vec2</span> <span class="text-white">uv</span> = <span class="text-white">gl_FragCoord</span>.<span class="text-cyan-400">xy</span> / <span class="text-white">resolution</span>;
    <span class="text-blue-400">vec3</span> <span class="text-white">color</span> = <span class="text-blue-400">vec3</span>(<span class="text-green-400">quantumRay</span>(<span class="text-white">uv</span>, <span class="text-yellow-400">3.14159</span>));
    
    <span class="text-white">gl_FragColor</span> = <span class="text-blue-400">vec4</span>(<span class="text-white">color</span>, <span class="text-yellow-400">1.0</span>);
}</pre>
                    </div>
                </div>
                
                <!-- Features List -->
                <div class="space-y-6 slide-right delay-900">
                    <div class="glass p-6 rounded-2xl border border-gray-700 hover:border-blue-500/50 transition-all duration-300 group">
                        <div class="flex items-start gap-4">
                            <div class="w-12 h-12 bg-blue-500/20 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-lucide="cpu" class="lucide lucide-cpu w-6 h-6 text-blue-400"><path d="M12 20v2"></path><path d="M12 2v2"></path><path d="M17 20v2"></path><path d="M17 2v2"></path><path d="M2 12h2"></path><path d="M2 17h2"></path><path d="M2 7h2"></path><path d="M20 12h2"></path><path d="M20 17h2"></path><path d="M20 7h2"></path><path d="M7 20v2"></path><path d="M7 2v2"></path><rect x="4" y="4" width="16" height="16" rx="2"></rect><rect x="8" y="8" width="8" height="8" rx="1"></rect></svg>
                            </div>
                            <div class="">
                                <h3 class="text-lg font-semibold mb-2">GPU Compute Shaders</h3>
                                <p class="text-gray-400 text-sm leading-relaxed">
                                    Harness parallel processing power with our optimized compute pipeline
                                </p>
                                <div class="flex items-center gap-2 mt-3">
                                    <span class="mono text-xs bg-blue-500/20 text-blue-300 px-2 py-1 rounded">HLSL</span>
                                    <span class="mono text-xs bg-purple-500/20 text-purple-300 px-2 py-1 rounded">GLSL</span>
                                    <span class="mono text-xs bg-cyan-500/20 text-cyan-300 px-2 py-1 rounded">WGSL</span>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="glass p-6 rounded-2xl border border-gray-700 hover:border-purple-500/50 transition-all duration-300 group">
                        <div class="flex items-start gap-4">
                            <div class="w-12 h-12 bg-purple-500/20 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-lucide="layers-3" class="lucide lucide-layers-3 w-6 h-6 text-purple-400"><path d="M12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83z"></path><path d="M2 12a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 12"></path><path d="M2 17a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 17"></path></svg>
                            </div>
                            <div class="">
                                <h3 class="text-lg font-semibold mb-2">Ray Marching Engine</h3>
                                <p class="text-gray-400 text-sm leading-relaxed">
                                    Advanced SDF-based rendering with real-time global illumination
                                </p>
                                <div class="mt-3 h-2 bg-gray-800 rounded-full overflow-hidden">
                                    <div class="h-full bg-gradient-to-r from-purple-500 to-pink-500 rounded-full" style="width: 87%;"></div>
                                </div>
                                <div class="mono text-xs text-gray-400 mt-1">Performance: 87%</div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="glass p-6 rounded-2xl border border-gray-700 hover:border-cyan-500/50 transition-all duration-300 group">
                        <div class="flex items-start gap-4">
                            <div class="w-12 h-12 bg-cyan-500/20 rounded-xl flex items-center justify-center group-hover:scale-110 transition-transform">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" data-lucide="sparkles" class="lucide lucide-sparkles w-6 h-6 text-cyan-400"><path d="M9.937 15.5A2 2 0 0 0 8.5 14.063l-6.135-1.582a.5.5 0 0 1 0-.962L8.5 9.936A2 2 0 0 0 9.937 8.5l1.582-6.135a.5.5 0 0 1 .963 0L14.063 8.5A2 2 0 0 0 15.5 9.937l6.135 1.581a.5.5 0 0 1 0 .964L15.5 14.063a2 2 0 0 0-1.437 1.437l-1.582 6.135a.5.5 0 0 1-.963 0z"></path><path d="M20 3v4"></path><path d="M22 5h-4"></path><path d="M4 17v2"></path><path d="M5 18H3"></path></svg>
                            </div>
                            <div>
                                <h3 class="text-lg font-semibold mb-2">Neural Denoising</h3>
                                <p class="text-gray-400 text-sm leading-relaxed">
                                    AI-powered noise reduction for crystal-clear real-time output
                                </p>
                                <div class="flex items-center gap-2 mt-3">
                                    <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                                    <span class="mono text-xs text-green-300">ML Model Active</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Stats Section -->
    <section class="relative z-10 py-24 px-6">
        <div class="max-w-4xl mx-auto">
            <div class="glass rounded-3xl p-12 border border-gray-700 fade-in delay-1000">
                <div class="grid md:grid-cols-4 gap-8 text-center">
                    <div>
                        <div class="text-4xl font-semibold text-blue-400 mono mb-2">2.4M+</div>
                        <div class="text-gray-400 text-sm">Shader Operations/sec</div>
                    </div>
                    <div>
                        <div class="text-4xl font-semibold text-purple-400 mono mb-2">∞</div>
                        <div class="text-gray-400 text-sm">Concurrent Rays</div>
                    </div>
                    <div>
                        <div class="text-4xl font-semibold text-cyan-400 mono mb-2">60fps</div>
                        <div class="text-gray-400 text-sm">Real-time Rendering</div>
                    </div>
                    <div>
                        <div class="text-4xl font-semibold text-green-400 mono mb-2">0.01ms</div>
                        <div class="text-gray-400 text-sm">Render Latency</div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script>
        // Initialize Lucide icons
        lucide.createIcons();

        // Particles.js configuration
        particlesJS('particles-js', {
            particles: {
                number: { value: 80, density: { enable: true, value_area: 800 } },
                color: { value: ["#3b82f6", "#8b5cf6", "#06b6d4"] },
                shape: { type: "circle" },
                opacity: { value: 0.3, random: true },
                size: { value: 2, random: true },
                line_linked: { enable: true, distance: 150, color: "#3b82f6", opacity: 0.1, width: 1 },
                move: { enable: true, speed: 1, direction: "none", random: false, straight: false, out_mode: "out", bounce: false }
            },
            interactivity: {
                detect_on: "canvas",
                events: { onhover: { enable: true, mode: "repulse" }, onclick: { enable: true, mode: "push" }, resize: true },
                modes: { repulse: { distance: 100, duration: 0.4 }, push: { particles_nb: 4 } }
            },
            retina_detect: true
        });

        // COBE Globe
        let phi = 0;
        const globe = createGlobe(document.getElementById("cobe"), {
            devicePixelRatio: 2,
            width: 384,
            height: 384,
            phi: 0,
            theta: 0,
            dark: 1,
            diffuse: 1.2,
            mapSamples: 16000,
            mapBrightness: 6,
            baseColor: [0.3, 0.3, 0.3],
            markerColor: [0.1, 0.8, 1],
            glowColor: [1, 1, 1],
            markers: [
                { location: [37.7595, -122.4367], size: 0.03 },
                { location: [40.7128, -74.006], size: 0.1 },
                { location: [51.5074, -0.1278], size: 0.05 },
                { location: [35.6762, 139.6503], size: 0.08 },
            ],
            onRender: (state) => {
                state.phi = phi;
                phi += 0.01;
            },
        });

        // Enhanced Three.js shader
        const canvas = document.getElementById('shader-canvas');
        const scene = new THREE.Scene();
        const camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);
        const renderer = new THREE.WebGLRenderer({ canvas: canvas, alpha: true });

        const fragmentShader = `
            uniform vec2 iResolution;
            uniform float iTime;
            uniform vec2 iMouse;

            float noise(vec2 p) {
                return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);
            }

            float fbm(vec2 p) {
                float value = 0.0;
                float amplitude = 0.5;
                for(int i = 0; i < 6; i++) {
                    value += amplitude * noise(p);
                    p *= 2.0;
                    amplitude *= 0.5;
                }
                return value;
            }

            float quantumField(vec2 p, float time) {
                vec2 q = vec2(fbm(p + vec2(0.0, 0.0)),
                              fbm(p + vec2(5.2, 1.3)));
                vec2 r = vec2(fbm(p + 4.0 * q + vec2(1.7 - time * 0.15, 9.2)),
                              fbm(p + 4.0 * q + vec2(8.3 - time * 0.126, 2.8)));
                return fbm(p + 4.0 * r);
            }

            vec3 palette(float t) {
                vec3 a = vec3(0.5, 0.5, 0.5);
                vec3 b = vec3(0.5, 0.5, 0.5);
                vec3 c = vec3(1.0, 1.0, 1.0);
                vec3 d = vec3(0.263, 0.416, 0.557);
                return a + b * cos(6.28318 * (c * t + d));
            }

            void main() {
                vec2 uv = (gl_FragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;
                vec2 mouse = (iMouse.xy * 2.0 - iResolution.xy) / iResolution.y;
                
                float field = quantumField(uv * 2.0, iTime);
                float field2 = quantumField(uv * 3.0 + mouse * 0.1, iTime * 1.3);
                
                vec3 color = palette(field + field2);
                color = mix(color, vec3(0.1, 0.2, 0.4), 0.7);
                
                // Add energy waves
                float wave1 = sin(length(uv) * 10.0 - iTime * 3.0) * 0.5 + 0.5;
                float wave2 = sin(length(uv + mouse * 0.1) * 8.0 - iTime * 2.0) * 0.5 + 0.5;
                
                color += vec3(0.1, 0.3, 0.8) * wave1 * 0.1;
                color += vec3(0.8, 0.2, 0.6) * wave2 * 0.1;
                
                // Vignette
                float vignette = 1.0 - length(uv) * 0.3;
                color *= vignette;
                
                gl_FragColor = vec4(color * 0.4, 1.0);
            }
        `;

        const material = new THREE.ShaderMaterial({
            vertexShader: `
                void main() {
                    gl_Position = vec4(position, 1.0);
                }
            `,
            fragmentShader: fragmentShader,
            uniforms: {
                iTime: { value: 0 },
                iResolution: { value: new THREE.Vector2() },
                iMouse: { value: new THREE.Vector2() }
            }
        });

        const geometry = new THREE.PlaneGeometry(2, 2);
        const mesh = new THREE.Mesh(geometry, material);
        scene.add(mesh);

        function resizeRenderer() {
            renderer.setSize(window.innerWidth, window.innerHeight);
            material.uniforms.iResolution.value.set(window.innerWidth, window.innerHeight);
        }

        function handleMouseMove(event) {
            material.uniforms.iMouse.value.set(event.clientX, window.innerHeight - event.clientY);
        }

        window.addEventListener('resize', resizeRenderer);
        window.addEventListener('mousemove', handleMouseMove);
        resizeRenderer();

        function animate() {
            requestAnimationFrame(animate);
            material.uniforms.iTime.value = performance.now() / 1000;
            renderer.render(scene, camera);
        }
        animate();

        // Smooth scroll animation
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.animationPlayState = 'running';
                }
            });
        }, observerOptions);

        document.querySelectorAll('.fade-in, .slide-left, .slide-right, .scale-in, .rotate-in').forEach(el => {
            observer.observe(el);
        });

        // Typing effect for code
        function typeWriter(element, text, speed = 50) {
            let i = 0;
            element.innerHTML = '';
            const interval = setInterval(() => {
                if (i < text.length) {
                    element.innerHTML += text.charAt(i);
                    i++;
                } else {
                    clearInterval(interval);
                }
            }, speed);
        }

        // Interactive hover effects
        document.querySelectorAll('.glass').forEach(element => {
            element.addEventListener('mouseenter', () => {
                element.style.transform = 'translateY(-2px)';
                element.style.boxShadow = '0 10px 40px rgba(59, 130, 246, 0.15)';
            });
            
            element.addEventListener('mouseleave', () => {
                element.style.transform = 'translateY(0)';
                element.style.boxShadow = 'none';
            });
        });

        // Add dynamic stats counter
        function animateValue(element, start, end, duration) {
            const range = end - start;
            const minTimer = 50;
            let stepTime = Math.abs(Math.floor(duration / range));
            stepTime = Math.max(stepTime, minTimer);
            
            const startTime = new Date().getTime();
            const endTime = startTime + duration;
            
            function run() {
                const now = new Date().getTime();
                const remaining = Math.max((endTime - now) / duration, 0);
                const value = Math.round(end - (remaining * range));
                element.innerHTML = value.toLocaleString();
                
                if (value !== end) {
                    setTimeout(run, stepTime);
                }
            }
            run();
        }

        // Initialize counter animations when stats section comes into view
        const statsSection = document.querySelector('section:last-of-type');
        const statsObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const stats = entry.target.querySelectorAll('.mono');
                    if (stats[0] && !stats[0].classList.contains('animated')) {
                        stats[0].classList.add('animated');
                        // Animate 2.4M+ counter
                        animateValue(stats[0], 0, 2400000, 2000);
                    }
                }
            });
        }, { threshold: 0.5 });

        if (statsSection) {
            statsObserver.observe(statsSection);
        }

        // Add loading animation
        window.addEventListener('load', () => {
            document.body.style.opacity = '1';
            document.body.style.transform = 'translateY(0)';
        });
    </script>

</body></html>